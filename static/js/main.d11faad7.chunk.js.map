{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","titleQuery","completedMode","handleChange","event","target","name","value","setState","filterByTitle","todo","title","toLowerCase","includes","filterByStatus","completed","this","props","todos","onUserSelect","todosLoaded","filteredTodos","filter","className","htmlFor","type","id","autoComplete","onChange","map","key","classnames","readOnly","checked","onClick","userId","React","Component","request","url","options","fetch","then","res","ok","Error","status","statusText","json","getAllTodos","getUser","CurrentUser","user","loadError","componentDidMount","updateUserInfo","componentDidUpdate","newUserId","a","data","clearUser","email","phone","PureComponent","App","selectedUserId","error","onUserClear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d11faad7.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    titleQuery: '',\n    completedMode: 'all',\n  }\n\n  static propTypes = {\n    todos: PropTypes.arrayOf(PropTypes.shape({\n      title: PropTypes.string,\n      userId: PropTypes.number,\n      completed: PropTypes.bool,\n      id: PropTypes.number.isRequired,\n    })).isRequired,\n    onUserSelect: PropTypes.func.isRequired,\n    todosLoaded: PropTypes.bool.isRequired,\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterByTitle = (todo) => {\n    if (todo.title === null) {\n      return false;\n    }\n\n    return todo.title.toLowerCase()\n      .includes(this.state.titleQuery.toLowerCase());\n  }\n\n  filterByStatus = (todo) => {\n    const { completedMode } = this.state;\n\n    switch (completedMode) {\n      case 'completed':\n        return todo.completed;\n\n      case 'active':\n        return !todo.completed;\n\n      default:\n        return true;\n    }\n  }\n\n  render() {\n    const { todos, onUserSelect, todosLoaded } = this.props;\n    const { titleQuery, completedMode } = this.state;\n\n    const filteredTodos = todos\n      .filter(this.filterByTitle)\n      .filter(this.filterByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        {todosLoaded\n          ? (<h2>Todos:</h2>)\n          : (<p>Error occured while loading users</p>)\n        }\n\n        <div className=\"TodoList__list-container\">\n          <label htmlFor=\"titleQuery\">\n            Filter todos:&nbsp;\n            <input\n              type=\"text\"\n              name=\"titleQuery\"\n              id=\"titleQuery\"\n              autoComplete=\"off\"\n              value={titleQuery}\n              onChange={this.handleChange}\n            />\n          </label>\n\n          <label htmlFor=\"completedMode\">\n            Show:&nbsp;\n            <select\n              name=\"completedMode\"\n              id=\"completedMode\"\n              value={completedMode}\n              onChange={this.handleChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"active\">Active</option>\n            </select>\n\n          </label>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classnames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classnames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': true },\n                  )}\n                  onClick={() => {\n                    onUserSelect(todo.userId);\n                  }}\n                  type=\"button\"\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status} - ${res.statusText}`);\n    }\n\n    return res.json();\n  });\n\nexport const getAllTodos = () => request('/todos');\n\nexport const getUser = id => request(`/users/${id}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n    loadError: false,\n  }\n\n  static propTypes = {\n    userId: PropTypes.number.isRequired,\n    clearUser: PropTypes.func.isRequired,\n  }\n\n  componentDidMount = () => {\n    this.updateUserInfo(this.props.userId);\n  }\n\n  componentDidUpdate = ({ userId }) => {\n    const newUserId = this.props.userId;\n\n    if (userId !== newUserId) {\n      this.updateUserInfo(newUserId);\n    }\n  }\n\n  updateUserInfo = async(userId) => {\n    try {\n      await getUser(userId).then((user) => {\n        if (user.data === null) {\n          throw new Error('User info missing');\n        }\n\n        this.setState({\n          user: user.data,\n          loadError: false,\n        });\n      });\n    } catch (error) {\n      this.setState({\n        user: {},\n        loadError: true,\n      });\n    }\n  }\n\n  render() {\n    const { user, loadError } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {user && user.id}\n          </span>\n        </h2>\n\n        {loadError\n          && (\n            <h3 className=\"CurrentUser__name\">\n              Unable to load User info\n            </h3>\n          )\n        }\n\n        <h3 className=\"CurrentUser__name\">\n          {user && user.name}\n        </h3>\n\n        <p className=\"CurrentUser__email\">\n          {user && user.email}\n        </p>\n\n        <p className=\"CurrentUser__phone\">\n          {user && user.phone}\n        </p>\n\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear user selection\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: null,\n    error: false,\n  };\n\n  componentDidMount = async() => {\n    try {\n      await getAllTodos()\n        .then((todos) => {\n          this.setState({ todos: todos.data });\n        });\n    } catch (error) {\n      this.setState({ error: true });\n    }\n  }\n\n  onUserSelect = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  onUserClear = () => {\n    this.setState({ selectedUserId: null });\n  }\n\n  render() {\n    const { todos, selectedUserId, error } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserSelect={this.onUserSelect}\n            todosLoaded={!error}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId\n              ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearUser={this.onUserClear}\n                />\n              )\n              : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}